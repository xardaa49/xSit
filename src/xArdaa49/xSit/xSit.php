<?php
/***
 *                 .oooooo..o  o8o      .
 *                d8P'    `Y8  `"'    .o8
 *    oooo    ooo Y88bo.      oooo  .o888oo
 *     `88b..8P'   `"Y8888o.  `888    888
 *       Y888'         `"Y88b  888    888
 *     .o8"'88b   oo     .d8P  888    888 .
 *    o88'   888o 8""88888P'  o888o   "888"
 *
 *
 *    @name xSit
 *    @author xArdaa49
 *    @version 1.0.0
 */
namespace xArdaa49\xSit;

use pocketmine\{block\Block,
    block\Opaque,
    block\Slab,
    block\Stair,
    entity\Entity,
    network\mcpe\NetworkBroadcastUtils,
    network\mcpetils,
    network\mcpe\protocol\AddActorPacket,
    network\mcpe\protocol\MoveActorAbsolutePacket,
    network\mcpe\protocol\RemoveActorPacket,
    network\mcpe\protocol\SetActorLinkPacket,
    network\mcpe\protocol\types\entity\EntityIds,
    network\mcpe\protocol\types\entity\EntityLink,
    network\mcpe\protocol\types\entity\EntityMetadataFlags,
    network\mcpe\protocol\types\entity\EntityMetadataProperties,
    network\mcpe\protocol\types\entity\LongMetadataProperty,
    network\mcpe\protocol\types\entity\PropertySyncData,
    player\Player,
    plugin\PluginBase,
    world\Position};
use xArdaa49\xSit\command\SitCommand;

class xSit extends PluginBase
{
    /**
     * @var array $sitPlayers
     */
    public array $sitPlayers = [];

    /**
     * @return void
     */
    protected function onEnable(): void
    {
        $this->getServer()->getpluginManager()->registerEvents(new EventListener($this), $this);
        $this->getServer()->getCommandMap()->register("xsit", new SitCommand($this, "sit", "Allows you to sit down or stand up from the floor."));
        parent::onEnable(); // TODO: Change the autogenerated stub
    }

    /**
     * @param Player $player
     * @return bool
     */
    public function isPlayerSiting(Player $player): bool
    {
        return isset($this->sitPlayers[$player->getName()]);
    }

    /**
     * @param Player $player
     * @return void
     */
    public function removeSitPlayer(Player $player): void
    {
        $removeActorPacket = new RemoveActorPacket();
        $removeActorPacket->actorUniqueId = $this->sitPlayers[$player->getName()]["auid"];

        $setActorLinkPacket = new SetActorLinkPacket();
        $setActorLinkPacket->link = new EntityLink($this->sitPlayers[$player->getName()]["auid"], $player->getId(), EntityLink::TYPE_REMOVE, true, true, 0.00);

        unset($this->sitPlayers[$player->getName()]);

        $player->getNetworkProperties()->setGenericFlag(EntityMetadataFlags::RIDING, false);

        NetworkBroadcastUtils::broadcastPackets($this->getServer()->getOnlinePlayers(), [$removeActorPacket, $setActorLinkPacket]);
    }

    /**
     * @param Player $player
     * @param Block $block
     * @return void
     */
    public function sitPlayer(Player $player, Block $block): void
    {
        if ($block instanceof Stair or $block instanceof Slab) {
            $position = $block->getPosition()->add(0.5, 1.5, 0.5);
        } elseif ($block instanceof Opaque) {
            $position = $block->getPosition()->add(0.5, 2.1, 0.5);
        } else {
            return;
        }

        foreach ($this->sitPlayers as $playerName => $data) {
            if ($position->equals($data['position'])) return;
        }

        if ($this->isPlayerSiting($player)) return;

        $this->setSit($player, $this->getServer()->getOnlinePlayers(), new Position($position->x, $position->y, $position->z, $this->getServer()->getWorldManager()->getWorldByName($player->getWorld()->getFolderName())));
    }

    /**
     * @param Player $player
     * @param array $viewers
     * @param Position $position
     * @param int|null $auid
     * @return void
     */
    private function setSit(Player $player, array $viewers, Position $position, ?int $auid = null): void
    {
        if ($auid === null) $auid = Entity::nextRuntimeId();

        $addActorPacket = new AddActorPacket();
        $addActorPacket->actorRuntimeId = $auid;
        $addActorPacket->actorUniqueId = $auid;
        $addActorPacket->type = EntityIds::WOLF;
        $addActorPacket->position = $position->asVector3();
        $addActorPacket->metadata = [
            EntityMetadataProperties::FLAGS => new LongMetadataProperty(1 << EntityMetadataFlags::IMMOBILE | 1 << EntityMetadataFlags::SILENT | 1 << EntityMetadataFlags::INVISIBLE),
        ];
        $addActorPacket->syncedProperties = new PropertySyncData([], []);

        $setActorLinkPacket = new SetActorLinkPacket();
        $setActorLinkPacket->link = new EntityLink($auid, $player->getId(), EntityLink::TYPE_RIDER, true, true, 0.00);

        $player->getNetworkProperties()->setGenericFlag(EntityMetadataFlags::RIDING, true);

        NetworkBroadcastUtils::broadcastPackets($this->getServer()->getOnlinePlayers(), [$addActorPacket, $setActorLinkPacket]);

        $this->sitPlayers[$player->getName()] = [
            "auid" => $auid,
            "position" => $position->asVector3(),
        ];
    }

    /**
     * @param Player $player
     * @return void
     */
    public function optimizeRotation(Player $player): void
    {
        $moveActorAbsolutePacket = new MoveActorAbsolutePacket();
        $moveActorAbsolutePacket->actorRuntimeId = $this->sitPlayers[$player->getName()]["auid"];
        $moveActorAbsolutePacket->position = $this->sitPlayers[$player->getName()]["position"];
        $moveActorAbsolutePacket->pitch = $player->getLocation()->getPitch();
        $moveActorAbsolutePacket->yaw = $player->getLocation()->getYaw();
        $moveActorAbsolutePacket->headYaw = $player->getLocation()->getYaw();

        NetworkBroadcastUtils::broadcastPackets($this->getServer()->getOnlinePlayers(), [$moveActorAbsolutePacket]);
    }
}